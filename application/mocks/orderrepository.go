// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/philaden/mds-stock-keeping/application/repositories (interfaces: IOrderRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domains "github.com/philaden/mds-stock-keeping/application/domains"
	dtos "github.com/philaden/mds-stock-keeping/application/dtos"
)

// MockIOrderRepository is a mock of IOrderRepository interface.
type MockIOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderRepositoryMockRecorder
}

// MockIOrderRepositoryMockRecorder is the mock recorder for MockIOrderRepository.
type MockIOrderRepositoryMockRecorder struct {
	mock *MockIOrderRepository
}

// NewMockIOrderRepository creates a new mock instance.
func NewMockIOrderRepository(ctrl *gomock.Controller) *MockIOrderRepository {
	mock := &MockIOrderRepository{ctrl: ctrl}
	mock.recorder = &MockIOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderRepository) EXPECT() *MockIOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateSingleOrder mocks base method.
func (m *MockIOrderRepository) CreateSingleOrder(arg0 domains.Order) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSingleOrder", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSingleOrder indicates an expected call of CreateSingleOrder.
func (mr *MockIOrderRepositoryMockRecorder) CreateSingleOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleOrder", reflect.TypeOf((*MockIOrderRepository)(nil).CreateSingleOrder), arg0)
}

// GetOrderItemsByProductIds mocks base method.
func (m *MockIOrderRepository) GetOrderItemsByProductIds(arg0 []uint) []domains.OrderItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByProductIds", arg0)
	ret0, _ := ret[0].([]domains.OrderItem)
	return ret0
}

// GetOrderItemsByProductIds indicates an expected call of GetOrderItemsByProductIds.
func (mr *MockIOrderRepositoryMockRecorder) GetOrderItemsByProductIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByProductIds", reflect.TypeOf((*MockIOrderRepository)(nil).GetOrderItemsByProductIds), arg0)
}

// UpdateStockLevel mocks base method.
func (m *MockIOrderRepository) UpdateStockLevel(arg0 chan dtos.OrderItemParam, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStockLevel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStockLevel indicates an expected call of UpdateStockLevel.
func (mr *MockIOrderRepositoryMockRecorder) UpdateStockLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStockLevel", reflect.TypeOf((*MockIOrderRepository)(nil).UpdateStockLevel), arg0, arg1)
}

// ValidateStock mocks base method.
func (m *MockIOrderRepository) ValidateStock(arg0 string, arg1 []dtos.OrderItemParam) (uint, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateStock", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateStock indicates an expected call of ValidateStock.
func (mr *MockIOrderRepositoryMockRecorder) ValidateStock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateStock", reflect.TypeOf((*MockIOrderRepository)(nil).ValidateStock), arg0, arg1)
}
