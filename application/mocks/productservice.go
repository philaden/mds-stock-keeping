// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/philaden/mds-stock-keeping/application/services (interfaces: IProductService)

// Package mocks is a generated GoMock package.
package mocks

import (
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dtos "github.com/philaden/mds-stock-keeping/application/dtos"
)

// MockIProductService is a mock of IProductService interface.
type MockIProductService struct {
	ctrl     *gomock.Controller
	recorder *MockIProductServiceMockRecorder
}

// MockIProductServiceMockRecorder is the mock recorder for MockIProductService.
type MockIProductServiceMockRecorder struct {
	mock *MockIProductService
}

// NewMockIProductService creates a new mock instance.
func NewMockIProductService(ctrl *gomock.Controller) *MockIProductService {
	mock := &MockIProductService{ctrl: ctrl}
	mock.recorder = &MockIProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductService) EXPECT() *MockIProductServiceMockRecorder {
	return m.recorder
}

// CreateSingleStock mocks base method.
func (m *MockIProductService) CreateSingleStock(arg0 dtos.UploadProductParam) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSingleStock", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSingleStock indicates an expected call of CreateSingleStock.
func (mr *MockIProductServiceMockRecorder) CreateSingleStock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleStock", reflect.TypeOf((*MockIProductService)(nil).CreateSingleStock), arg0)
}

// GetProductBySku mocks base method.
func (m *MockIProductService) GetProductBySku(arg0 string) (*dtos.ProductResponseDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductBySku", arg0)
	ret0, _ := ret[0].(*dtos.ProductResponseDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductBySku indicates an expected call of GetProductBySku.
func (mr *MockIProductServiceMockRecorder) GetProductBySku(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductBySku", reflect.TypeOf((*MockIProductService)(nil).GetProductBySku), arg0)
}

// GetProducts mocks base method.
func (m *MockIProductService) GetProducts() (dtos.ProductsResponseDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].(dtos.ProductsResponseDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockIProductServiceMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockIProductService)(nil).GetProducts))
}

// UploadStock mocks base method.
func (m *MockIProductService) UploadStock(arg0 *multipart.FileHeader) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadStock", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadStock indicates an expected call of UploadStock.
func (mr *MockIProductServiceMockRecorder) UploadStock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadStock", reflect.TypeOf((*MockIProductService)(nil).UploadStock), arg0)
}
